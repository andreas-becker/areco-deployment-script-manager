<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="hybris_extensions"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>Custom Rule set for Hybris proyects</description>
  
  <rule ref="rulesets/java/basic.xml" /> <!-- All these rules are common sense -->
  <rule ref="rulesets/java/braces.xml" /> <!-- It is consistent with the code conventions and improves readibility -->
  <rule ref="rulesets/java/clone.xml" /> <!-- Good practices with the clone method -->
  <!-- Good practices to avoid imperative programming. The limits require tweaking. -->
  <rule ref="rulesets/java/codesize.xml"> 
	<exclude name="StdCyclomaticComplexity"/> <!-- One rule to measure the cyclomatic complexity is enough. -->
	<exclude name="ModifiedCyclomaticComplexity"/> <!-- One rule to measure the cyclomatic complexity is enough. -->
  </rule>
  
  <!-- Comments ruleset. The next one is the only useful rule. -->
  <rule ref="rulesets/java/comments.xml/CommentRequired" >
	<!-- Only the interface should have comments -->
    <properties>
		<property name="enumCommentRequirement" value="Ignored" />
		<property name="protectedMethodCommentRequirement" value="Ignored" />
		<property name="publicMethodCommentRequirement" value="Required" />
		<property name="fieldCommentRequirement" value="Ignored" />
		<property name="headerCommentRequirement" value="Required" />
		<!-- We ignore the rule for setters and getters -->
		<property name="violationSuppressRegex" value="(is|get|set).*"/>
		<!-- We ignore overidden public methods, constructors and methods with the annotations @Test, @Before or @After -->
		<property name="violationSuppressXPath" value="//ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Public='true' and ../Annotation/MarkerAnnotation/Name[@Image= 'Override' or @Image= 'Test' or @Image= 'After' or @Image= 'Before']] | //ClassOrInterfaceBodyDeclaration/ConstructorDeclaration" />
	</properties>
  </rule>

  <!-- Controversial: Most of the rules applied to unusual cases. -->
  <rule ref="rulesets/java/controversial.xml/AvoidUsingVolatile" >
	<!-- I don't really understand volatile, and you? -->
  </rule>
  
  <!-- Coupling: Most of the rules yield to many false positives -->
   <rule ref="rulesets/java/coupling.xml/LooseCoupling" >
	<!-- It is always better to use the interface. -->
  </rule>
  
   <!-- Design: These rules make sense -->
  <rule ref="rulesets/java/design.xml" >
	<exclude name="AvoidSynchronizedAtMethodLevel"/> <!-- The synchronized at method level is easier to understand -->
	<!-- UncommentedEmptyMethod: Always document empty blocks -->
	<!-- PreserveStackTrace: The stacktrace must be logged -->
  </rule>
  
   <!-- Empty: These rules make sense -->
  <rule ref="rulesets/java/empty.xml" />
  
  <!-- Finalizer: It is rarely used. But these rules prevent developers from using it badly. -->
  <rule ref="rulesets/java/finalizers.xml" />
  
   <!-- Imports: All these rules make sense. -->
  <rule ref="rulesets/java/imports.xml" />
  
  <!-- J2EE: We don't use it in this project. -->
  <!-- JavaBean: Most of the classes are never serialized and defining the serialID is only more work for the developer. -->

  <!-- Junit: They make tests more readibable and documented. -->
  <rule ref="rulesets/java/junit.xml" />
  
  <!-- logging-jakarta-commons: Not used on this project -->
  
  <!-- Logging Java: These rules make sense. Most of the errors are uncommon. -->
  <rule ref="rulesets/java/logging-java.xml" >
	<exclude name="GuardLogStatementJavaUtil"/> <!-- There isn't any solid evidence that this improves the performance. And there were some issues with this rule in the past. -->
  </rule>
  
   <!-- migration: Old Java versions aren't used on this project -->
  <!-- Naming: TODO A code convention must be defined.-->
  <!-- Optimizations: Most of these rules could improve perfoermance, but the effort of changing the code is high
       and sometimes controvertial.-->
       
   <!-- Strict Exceptios: These rules avoid bad practises and are very useful. -->
  <rule ref="rulesets/java/strictexception.xml" />
  
    <!-- strings: Most of this rule are optimizations and it always easier to read string as stringbuffers which has a low performance. -->

  <!-- sunsecure: These rules about arrays prevent difficult to find bugs. -->
  <rule ref="rulesets/java/sunsecure.xml" />
  
  
  <!-- typeresolution: These rules make sense. Some of them are already contained in other packages. -->
   <rule ref="rulesets/java/typeresolution.xml" />

   <!-- unnecessary: These rules make sense.  -->
   <rule ref="rulesets/java/unnecessary.xml" />

   <rule ref="rulesets/java/unusedcode.xml"></rule> <!-- We detect unsused code. -->
</ruleset>
