<project name="ant_qa_cobertura" default="cobertura" basedir=".">
	<property name="dir_cobertura_home" value="${dir_qa}/cobertura-2.0.3"/>
	<property name="dir_cobertura_donwload_url" value="http://downloads.sourceforge.net/project/cobertura/cobertura/2.0.3/cobertura-2.0.3-bin.zip"/>
	<property name="dir_cobertura_donwload_file" value="${dir_qa}/cobertura.zip"/>
	<!-- Hybris finds the cobertura datafile in the root directory. -->
	<property name="datafile_cobertura" value="${basedir}/cobertura.ser" />
	
	<!-- We copy the libs from cobertura to the core extension.
		This is a workaround because we cannot change the classpath of Hybris. -->
	<property name="dir_unit_tests_libs" value="${dir_platform}/ext/core/lib" />
	
	
	<fileset id="fileset_cobertura_runtimelib" dir="${dir_cobertura_home}/">
		<include name="cobertura*.jar" />
	</fileset>
	
	<fileset id="fileset_cobertura_runtimelib_copy" dir="${dir_unit_tests_libs}">
		<include name="cobertura*.jar" />
	</fileset>
	
	<fileset id="fileset_cobertura_otherlibs" dir="${dir_cobertura_home}/">
		<include name="lib/**/*.jar" />
	</fileset>
	
	<macrodef name="cobertura.clean.libs" description="Removes the cobertura datafile and libraries">
		<sequential>
			<delete file="${datafile_cobertura}"/>
			<delete>
				<fileset refid="fileset_cobertura_runtimelib_copy" />
			</delete>
		</sequential>
	</macrodef>
	
	<macrodef name="cobertura.clean.instrumentation" description="Removes the instrumented classes">
		<sequential>
			<ant 
				dir="${dir_platform}"
				target="clean"
				inheritAll="false" />
		</sequential>
	</macrodef>
	
	<target name="cobertura" depends="cobertura.install, build, qa_clean" description="Runs cobertura">
		 <taskdef resource="tasks.properties">
				<classpath>
					<fileset refid="fileset_cobertura_runtimelib" />
					<fileset refid="fileset_cobertura_otherlibs" />
				</classpath>
		</taskdef>
	
		<cobertura.clean.libs />
		<copy todir="${dir_unit_tests_libs}">
			<fileset refid="fileset_cobertura_runtimelib" />
		</copy>
		
		<!-- We leave the instrumented classes in the original directory because we cannot add a new classpath
		to the target that runs the yunit tests. -->
		<cobertura-instrument datafile="${datafile_cobertura}">
			<ignore regex="org.apache.log4j.*" />
			<fileset refid="fileset_bin" />
			<auxClasspath>
                <fileset refid="fileset_hybris_bin" />
            </auxClasspath>
		</cobertura-instrument>
		<!-- Run the tests -->
		<ant 
			dir="${dir_platform}"
			target="yunit"
			inheritAll="false">
		</ant>
		<ant 
			dir="${dir_platform}"
			target="yunitweb"
			inheritAll="false">
		</ant>
		
		<!-- Create report -->
		<cobertura-report format="html" destdir="${dir_qa_reports}/cobertura"  datafile="${datafile_cobertura}" encoding="UTF-8">
			<fileset refid="fileset_src" />
		</cobertura-report>
		
		<cobertura-check  datafile="${datafile_cobertura}" haltonfailure="false" failureproperty="coberturafailed"
			totallinerate="20">
		</cobertura-check>
		
		<cobertura.clean.libs />
		<cobertura.clean.instrumentation />
		
		<!-- Low line coverage must break the build after we cleaned up the mess. -->
		<fail if="coberturafailed" message="The code coverage is less than the limit" />
	</target>
	
	
	
	 <target name="cobertura.check.installation" >
        <available property="cobertura.available"
            file="${dir_cobertura_home}"
            type="dir"/>
    </target>
	
	<target name="cobertura.install" description="Downloads and installs cobertura"
        unless="cobertura.available"
		depends="cobertura.check.installation">
		<get src="${dir_cobertura_donwload_url}" 
			dest="${dir_cobertura_donwload_file}" 
			verbose="true"
			usetimestamp="true"/>
		<unzip src="${dir_cobertura_donwload_file}" dest="${dir_qa}" failOnEmptyArchive="true" />
		<delete file="${dir_cobertura_donwload_file}"/>
	</target>
</project>
