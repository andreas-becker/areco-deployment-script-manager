/**
 * Copyright 2014 Antonio Robirosa

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import de.hybris.platform.core.Registry;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.testframework.HybrisJUnit4ClassRunner;
import de.hybris.platform.testframework.RunListeners;
import de.hybris.platform.testframework.runlistener.LogRunListener;
import de.hybris.platform.testframework.runlistener.PlatformRunListener;
import de.hybris.platform.tx.Transaction;
import org.apache.log4j.Logger;
import org.areco.ecommerce.deploymentscripts.core.DeploymentEnvironmentDAO;
import org.areco.ecommerce.deploymentscripts.model.DeploymentEnvironmentModel;
import org.areco.ecommerce.deploymentscripts.jalo.ArecoDeploymentScriptsManagerManager;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;

final String DUMMY_ENVIRONMENT_NAME = "DUMMY_ENVIRONMENT";
final String DUMMY_ENVIRONMENT_DESCRIPTION = "Please remove this environment. It was used for an integration test.";

final Logger LOG = Logger.getLogger(ArecoDeploymentScriptsManagerManager.class);
final DeploymentEnvironmentDAO flexibleSearchDeploymentEnvironmentDAO = Registry.getApplicationContext().getBean(DeploymentEnvironmentDAO.class);
final ModelService modelService = Registry.getApplicationContext().getBean("modelService", ModelService.class);

final Set dummyEnvironmentsNames = new HashSet();
dummyEnvironmentsNames.add(DUMMY_ENVIRONMENT_NAME);

DeploymentEnvironmentModel dummyEnvironment = modelService.create(DeploymentEnvironmentModel.class);
dummyEnvironment.setName(DUMMY_ENVIRONMENT_NAME);
dummyEnvironment.setDescription(DUMMY_ENVIRONMENT_DESCRIPTION);
modelService.save(dummyEnvironment);
if (LOG.isDebugEnabled()) {
        LOG.debug("The deployment environment " + dummyEnvironment + " was saved.");
}
return "OK";
